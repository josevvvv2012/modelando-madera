#LyX 1.5.6 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language spanish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize 11
\spacing onehalf
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
renewcommand{
\backslash
tablename}{Tabla}
\end_layout

\begin_layout Standard


\backslash
renewcommand{
\backslash
listtablename}{
\backslash
'Indice de tablas}
\end_layout

\begin_layout Standard


\backslash
frontmatter
\end_layout

\end_inset


\end_layout

\begin_layout Title
Desarrollo de software para modelado y fabricación de objetos de madera
 usando un robot SCARA
\end_layout

\begin_layout Author
Roberto Loaeza Valerio
\end_layout

\begin_layout Standard
\begin_inset LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList table

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Standard


\backslash
mainmatter
\end_layout

\begin_layout Standard


\backslash
setcounter{page}{6}
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Introducción
\end_layout

\begin_layout Standard
En la actualidad las pequeñas y medianas empresas de la región maderera
 del estado de Michoacán, más preciso en la localidad de Paracho, requieren
 tener la totalidad de sus procesos automatizados para poder competir en
 el mercado tan saturado actualmente.
 Desafortunadamente la mayoría de estas empresas no cuentan con todos los
 procesos automatizados.
\end_layout

\begin_layout Standard
Los procesos que pueden automatizarse los dividiremos en dos categorías
 para fines de su estudio:
\end_layout

\begin_layout Itemize
Procesos administrativos
\end_layout

\begin_layout Itemize
Procesos industriales
\end_layout

\begin_layout Standard
Los procesos administrativos abarca todo proceso relacionado con documentación
 de la empresa, algunos ejemplos de estos procesos son los siguientes departamen
tos: recursos humanos, recursos financieros, ventas, compras, entre otros.
 Estos procesos o departamentos estan parcial o totalmente cubiertos por
 aplicaciones ofrecidas por el gobierno de forma gratuita o haciendo uso
 de aplicaciones de terceros, algunas de las aplicaciones utilizadas son:
\end_layout

\begin_layout Itemize
ContPAQ
\end_layout

\begin_layout Itemize
Compiere
\end_layout

\begin_layout Itemize
NomiPAQ
\end_layout

\begin_layout Itemize
SUA
\end_layout

\begin_layout Standard
Por otra parte los procesos industriales son todos los procesos en los que
 se manipula una materia prima y es transformada en un producto final mediante
 el uso de maquinaria industrial, y es en estos procesos donde se centra
 el trabajo de la presente tesis.
\end_layout

\begin_layout Standard
Teniendo las empresas la necesidad de contar con maquinaria industrial de
 precisión se ven en la necesidad de adquirir esta maquinaria en el extrajero
 debido a que en el país no existen empresas presten estos servicios.
\end_layout

\begin_layout Standard
Al usar maquinaria extranjera es evidente que los costos de compra, instalación,
 mantenimiento y programación son elevados, en la tabla 
\begin_inset LatexCommand ref
reference "tab:Costos-de-adquisición"

\end_inset

 se muestran algunas maquinarias adquiridas por empresas de la localidad
 de Paracho Michoacán.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Empresa
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Maquinaria
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Costo de Adquisición
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Costo de mantenimiento
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PROCART
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tab:Costos-de-adquisición"

\end_inset

Costos de adquisición de maquina industrial
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Observando la necesidad de la automatización en los procesos de fabricación
 de productos se optó por desarrollar una aplicación multiplataforma para
 el modelado de productos de madera haciendo uso de un robot SCARA realizado
 en la Facultad de Ingenieria Eléctrica de la Universidad Michoacana de
 San Nicolas de Hidalgo.
\end_layout

\begin_layout Section
Motivación
\end_layout

\begin_layout Standard
En la actualidad la utilización de robots manipuladores en la mayoría de
 las pequeñas y medianas fábricas, en específico las fábricas de la región
 maderera del estado de Michoacán, son factor de que estas tengan un menor
 costo en su proceso de producción y con esto puedan así competir en el
 mercado saturado por productos extranjeros.
\end_layout

\begin_layout Standard
Por otra parte el diseño innovador de nuevos productos de madera se ve estancado
 por la falta de una herramienta para su modelado e implementación en un
 robot manipulador.
\end_layout

\begin_layout Section
Antecedentes
\end_layout

\begin_layout Standard
Los antecedentes previos realizados en la División de Estudios de Posgrado
 de la Facultad de Ingeniería Eléctrica, de la Universidad Michoacana de
 San Nicolás de Hidalgo, es la construcción de un robot manipulador tipo
 SCARA de cuatro grados de libertad de plataforma abierta, para el cual
 se desarrollará la aplicación de la presente tesis.
\end_layout

\begin_layout Section
Objetivos
\end_layout

\begin_layout Standard
El objetivo general es realizar investigación a fondo en los aspectos computacio
nales relacionados con el modelado de objetos físicos y desarrollar el software
 necesario para que el robot SCARA pueda realizarlos, de forma que se desarrolle
 tecnología propia que promueva una industria robótica y se generen diversas
 aplicaciones que tengan un importante impacto social como económico.
\end_layout

\begin_layout Standard
Se realizarán también estudios sobre implementación de planeadores de movimiento
s en brazos robóticos para que las acciones se realicen lo más rápido posible.
\end_layout

\begin_layout Standard
Finalmente se realizarán pruebas del software desarrollado con el robot
 SCARA.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename imagenes/objetivosTesis.png
	width 70page%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:DiagramaObjetivos"

\end_inset

Diagrama representativo del objetivo de la tesis
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la figura 
\begin_inset LatexCommand ref
reference "fig:DiagramaObjetivos"

\end_inset

 representa gráficamente el objetivo, donde se puede apreciar que el presente
 proyecto de tesis tiene como entrada el diseño por parte de una persona
 el cual es interpretado para su futura producción en un robot SCARA.
 
\end_layout

\begin_layout Subsection*
Objetivos específicos
\end_layout

\begin_layout Itemize
Generar una plataforma 3D para el modelado de objetos de madera.
 
\end_layout

\begin_layout Itemize
Implementar algoritmos de gráficación sobre la plataforma 3D los siguientes
 elementos:
\end_layout

\begin_deeper
\begin_layout Itemize
Puntos 
\end_layout

\begin_layout Itemize
Lineas
\end_layout

\begin_layout Itemize
Curvas de Bezier
\end_layout

\begin_layout Itemize
Curvas Spline
\end_layout

\end_deeper
\begin_layout Itemize
Desarrollar software para modelado implementando los algoritmos anteriores.
\end_layout

\begin_layout Itemize
Desarrollar software para comunicación entre el software de modelado y el
 robot SCARA.
 
\end_layout

\begin_layout Section
Alcances
\end_layout

\begin_layout Standard
Los alcances previstos son:
\end_layout

\begin_layout Itemize
Desarrollo de una aplicación multiplataforma capaz de modelar objetos de
 madera para su producción utilizando un robot SCARA.
\end_layout

\begin_layout Itemize
Desarrollo de interfaz entre la aplicación multiplataforma para modelar
 objetos de madera y el robot SCARA para la producción.
\end_layout

\begin_layout Section
Metodología
\end_layout

\begin_layout Standard
Para lograr los objetivos mencionados anteriormente se propone desarrollar
 una aplicación multiplataforma para el modelado de objetos de madera en
 el lenguaje Java.
\end_layout

\begin_layout Standard
Para esto se desarrollarán prototipos de la aplicación, hasta lograr una
 estabilidad considerable, la cual tenga una velocidad alta a la hora de
 generar los modelos en diferentes vistas, esto se deberá hacer mediante
 hardware usando la API de OpenGL.
\end_layout

\begin_layout Standard
Con el fin de impulsar este tipo de proyectos, se propone que la aplicación
 final sea evaluada en los talleres de Paracho.
\end_layout

\begin_layout Section
Contribuciones esperadas
\end_layout

\begin_layout Standard
A continuación se describen brevemente las contribuciones de este trabajo:
\end_layout

\begin_layout Itemize
Aplicación multiplataforma para la construcción de modelos físicos de madera.
 Se utiliza la API OpenGL para acelerar tanto cálculo como regeneración
 de vistas 3D.
\end_layout

\begin_layout Itemize
Aplicación multiplataforma para la conexion entre el modelador y el robot
 SCARA.
 
\end_layout

\begin_layout Itemize
Código fuente, éste se distribuirá bajo la 
\begin_inset Quotes eld
\end_inset


\emph on
GNU General Public License v2
\emph default

\begin_inset Quotes erd
\end_inset

 y se puede acceder a él en la siguiente url: modelando-madera.googlecode.com
\end_layout

\begin_layout Section
Descripción de los capítulos
\end_layout

\begin_layout Standard
En el capítulo 
\begin_inset LatexCommand ref
reference "cha:2_Ambiente"

\end_inset

 se presentarán una revisión del estado del arte asociado con la paqueteria
 de software existente para el modelado/fabricación de objetos de madera.
 Finalmente se describirá el contenido de cada capítulo.
\end_layout

\begin_layout Standard
En el capítulo 
\begin_inset LatexCommand ref
reference "cha:4_Interfaces3D"

\end_inset

 se mostrarán las principales interfaces de software para la implementación
 de software 3D, se mostrarán pros y contras de cada una de estas y finalmente
 se detallará el funcionamiento de la interfaz OpenGL sobre la cual se realizará
 la implementación del software.
\end_layout

\begin_layout Standard
En el capítulo 
\begin_inset LatexCommand ref
reference "cha:3_Modelado3D"

\end_inset

 aborda las partes del software modelador tanto los algoritmos de graficación
 como la forma de interacción con el usuario final.
 
\end_layout

\begin_layout Standard
En el capítulo 
\begin_inset LatexCommand ref
reference "cha:5_InterfazModelado"

\end_inset

 trata las características del robot SCARA, la forma de conversión del modelo
 a acciones que el robot entienda así como un algoritmo de planeación para
 que el robot sea lo más optimo posible.
 También se describirá la interfaz entre el software de modelado y el robot.
\end_layout

\begin_layout Standard
En el capítulo 
\begin_inset LatexCommand ref
reference "cha:6_Pruebas"

\end_inset

 se mostrarán resultados de pruebas realizadas en una primera instancia
 al software modelador, seguido de los resultados de la conectividad entre
 el software y el robot, y finalmente se verificará que tanta funcionalidad
 doto el algoritmo de planeación implementado.
\end_layout

\begin_layout Standard
En el capítulo 
\begin_inset LatexCommand ref
reference "cha:7_Conclusiones"

\end_inset

 se aportarán las conclusiones generales resultado de la investigación abordada
 e ideas para trabajo de investigación posterior a realizar en el mismo
 campo del conocimiento.
 
\end_layout

\begin_layout Chapter
Ambiente de programación de robots manipuladores
\begin_inset LatexCommand label
name "cha:2_Ambiente"

\end_inset


\end_layout

\begin_layout Section
Robot
\end_layout

\begin_layout Standard
Un robot, es un agente artificial mecánico o virtual.
 Los primeros son maquinas usadas para realizar un trabajo automaticamente
 y son controlados por una computadora; por otro lado tenemos a los robots
 virtuales también conocidos como 
\begin_inset Quotes eld
\end_inset

bots
\begin_inset Quotes erd
\end_inset

 que son agentes virtuales de software.
\end_layout

\begin_layout Standard
En general para considerar a un agente artificial como robot, este debe
 cumplir algunas propiedades:
\end_layout

\begin_layout Itemize
Manipular cosas de su entorno.
\end_layout

\begin_layout Itemize
Sentir cosas del entorno.
\end_layout

\begin_layout Itemize
Contar con cierta inteligencia para tomar decisiones basadas en el ambiente
 o en una secuencia previamente programada.
\end_layout

\begin_layout Itemize
Ser programable
\end_layout

\begin_layout Itemize
Moverse en uno o más ejes.
\end_layout

\begin_layout Itemize
Realizar movimientos coordinados.
\end_layout

\begin_layout Standard
A continuación se presentan algunas definiciones realizadas por diferentes
 institutos:
\end_layout

\begin_layout Itemize
La ISO 8373 lo define como 
\begin_inset Quotes eld
\end_inset


\emph on
un manipulador multipropósito automaticamente controlado y reprogramable
 de mas de tres ejes
\emph default

\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Itemize
El Instituto de Robótica de América lo define como 
\begin_inset Quotes eld
\end_inset


\emph on
manipulador multifuncional y reprogramable diseñado para mover material,
 partes, herramientas o dispositivos especializados mediante varios movimientos
 programados para la realización de una variedad de tareas
\emph default

\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Clasificación
\end_layout

\begin_layout Standard
La Asociación Japonesa de Robots Industriales (JIRA, por sus siglas en inglés)
 clasificó los robots desde manipuladores simples hasta sistemas avanzados
 incorporando inteligencia artificial.
 A continuación se lista dicha clasificación la cual fue realizada a finales
 del siglo veinte
\begin_inset LatexCommand cite
after "p. 267"
key "key-2"

\end_inset

:
\end_layout

\begin_layout Itemize
Manipuladores operados manualmente.
 Máquinas que requieren ser operadas por humanos.
\end_layout

\begin_layout Itemize
Manipuladores secuenciales.
 Dispositivos que realizan una serie de tareas en la misma secuencia cada
 vez que son activados.
\end_layout

\begin_layout Itemize
Manipuladores programables.
 Se incluyen los tipos simples de los robots industriales.
\end_layout

\begin_layout Itemize
Robots controlados numéricamente.
 Servo robots.
\end_layout

\begin_layout Itemize
Robots con sensores.
 Robots que utilizan sensores de cualquier tipo, proximidad, presión, tactil,
 etc.
\end_layout

\begin_layout Itemize
Robots adaptativos.
 Robots que ajustan la forma en que trabajan para compensar cambios en el
 entorno.
\end_layout

\begin_layout Itemize
Robots inteligentes.
 Robots con controladores de salida sofisticados que pueden considerarse
 para procesar inteligencia artificial.
\end_layout

\begin_layout Itemize
Sistemas mecatrónicos inteligentes.
 Computadoras que controlan un conjunto de robots o dispositivos robóticos.
\end_layout

\begin_layout Subsection
Estructura de los robots manipuladores
\end_layout

\begin_layout Standard
Básicamente la estructura de un robot manipulador es la de un brazo articulado.
 De manera más específica un robot manipulador industrial es una cadena
 cinemática abierta formada por un conjunto de eslabones interrelacionados
 mediante articulaciones las cuales permiten el movimiento de esta dicha
 cadena.
\end_layout

\begin_layout Subsubsection
Tipos de articulaciones
\end_layout

\begin_layout Standard
Existen diferentes tipos de articulaciones como podemos observar en la figura
 
\begin_inset LatexCommand ref
reference "fig:TiposArticulaciones"

\end_inset

:
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
a) La articulación de rotación suministra un grado de libertad, es decir
 permite la rotación sobre el eje de la articulación.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
b) La articulación prismática consiste en una translación a lo largo del
 eje de la articulación.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
c) En la articulación cilíndrica existen dos grados de libertad, una rotación
 y una translación sobre el eje de la articulación.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
d) La articulación planar se caracteriza por el movimiento de desplazamiento
 en un plano, tiene dos grados de libertad.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
e) Por último la articulación esférica combina tres giros en tres direcciones
 perpendiculares en el espacio.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename imagenes/articulaciones.png
	scale 80

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Tipos de articulaciones: a) rotación b) prismática c) cilíndrica d) planar
 e) esférica
\begin_inset LatexCommand label
name "fig:TiposArticulaciones"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Estructuras básicas
\end_layout

\begin_layout Standard
La estructura básica de un robot manipulador consiste en un brazo compuesto
 por elementos con articulaciones entre ellos.
 En el último enlace se coloca un efector final como una pinza o un dispositivo
 especial para realizar operaciones específicas.
 Estas estructuras tienen ciertas propiedades en cuanto a su espacio de
 trabajo y accesibilidad a posiciones determinadas.
 En la figura 
\begin_inset LatexCommand ref
reference "fig:Estructuras"

\end_inset

 se muestran algunas configuraciones básicas.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename imagenes/manipuladores.png
	scale 80

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Estructura: a) 3D b) 2D c) 1D d) 3G
\begin_inset LatexCommand label
name "fig:Estructuras"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
a) Configuración 3D o PPP tiene tres articulaciones prismáticas.
 Es bastante usual en la industria para el tansporte de cargas voluminosas.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
b) Configuración cilíndrica presenta un volumen de trabajo parecido a un
 cilindro, sin embargo generalmente no tienen una rotación de 360º.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
c) Configuración polar, los de brazo articulado y los modelos SCARA presentan
 un volumen de trabajo irregular.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
d) Configuración angular.
\end_layout

\begin_layout Section
Revisión del Estado del Arte
\end_layout

\begin_layout Standard
En la actualidad los robots son usados para realizar tareas peligrosas,
 difíciles, repetitivas y/o complicadas para los humanos.
 Esto usualmente toma la forma de un robot industrial usado en las líneas
 de producción.
 Algunas aplicaciones incluyen la limpieza de residuos tóxicos, minería
 y localización de minas terrestres.
 Sin embargo la manufactura continúa siendo el principal mercado donde los
 robots son utilizados, en particular, robots articulados son los más usados
 comúnmente.
 Las aplicaciones incluyen soldado, pintado y carga de maquinaria.
 En este ramo la industria automotriz ha tomado gran ventaja de esta nueva
 tecnología donde los robots han sido programados para reemplazar el trabajo
 de los humanos en muchas tareas repetitivas.
\end_layout

\begin_layout Subsection
Programación
\end_layout

\begin_layout Standard
Un lenguaje de programación de robots sirve como interfaz entre el usuario
 humano y el robot industrial.
 Los manipuladores de robots se diferencian a sí mismos de la automatización
 fija por ser 
\begin_inset Quotes eld
\end_inset

flexibles
\begin_inset Quotes erd
\end_inset

, es decir que son programables.
 No solo son programables los movimientos de los manipuladores sino que,
 a través del uso de sensores y comunicación con otros tipos de automatización,
 los manipuladores pueden adaptarse a las variaciones a medida que realizan
 su tarea.
\end_layout

\begin_layout Standard
Generalmente la programación de los robots se realiza fuera de linea, a
 continuación se listan paquetes existentes para programar:
\end_layout

\begin_layout Itemize
MS Robotic Studio ( ~ $ 4 000.00 M.N)
\end_layout

\begin_deeper
\begin_layout Itemize
Herramienta de programación visual para crear y depurar aplicaciones robóticas.
 El desarrollador puede interactuar con los robots mediante interfases basadas
 en web o nativas al sistema operativo (MS Windows).
\end_layout

\begin_layout Itemize
Contiene simulación realística provista por el motor PhysX de AGEIA.
 Se posibilita la emulación por software o la aceleración por hardware.
\end_layout

\begin_layout Itemize
Se permiten varios lenguajes como: Microsoft Visual Studio Express languages
 (Visual C#® y Visual Basic® .NET), JScript® y Microsoft IronPython 1.0 Beta
 1, y lenguajes de terceros que se adecuen a la arquitectura basada en servicios.
\end_layout

\begin_layout Itemize
Robots soportados: CoroWare's CoroBot ($3 200), Lego Mindstorms NXT, iRobot
 Create y Robosoft's robots (38 a 65 K€).
\end_layout

\end_deeper
\begin_layout Itemize
KUKA.OfficeLite (> $55 000.00 USD) 
\end_layout

\begin_deeper
\begin_layout Itemize
Este sistema de programación posee las mismas características que el software
 de sistema KUKA: para el manejo y la programación se utiliza la interfaz
 de usuario Original KUKA y la sintaxis KRL: un lenguaje completo.
\end_layout

\begin_layout Itemize
Disponibilidad de todo el repertorio de funciones de las respectivas ediciones
 del software de sistema.
 Sin embargo, no se pueden conectar dispositivos de hardware periféricos.
\end_layout

\begin_layout Itemize
Comprobación de sintaxis mediante el compilador y el interpretador disponibles;
 creación de programas KRL de usuario ejecutables.
\end_layout

\begin_layout Itemize
Control completo de la ejecución de un programa de aplicación de robot.
 Ello permite optimizar la duración de los ciclos.
\end_layout

\begin_layout Itemize
El Techware de KUKA para optimización de programas se puede utilizar e instalar
 en todo momento.
 De este modo, en un PC estándar se puede disponer de todo el software de
 sistema Original, sin necesidad de emulaciones.
\end_layout

\begin_layout Itemize
Las entradas originales se pueden simular.
\end_layout

\begin_layout Itemize
KUKA.OfficeLite no se puede utilizar para controlar un robot.
\end_layout

\end_deeper
\begin_layout Subsection
Desarrollo tecnológico
\end_layout

\begin_layout Standard
Desafortunadamente el desarrollo actual en el país está enfocado generalmente
 a robots móviles dejando a los manipuladores de lado.
\end_layout

\begin_layout Standard
Universidades como el Tecnológico de Monterrey [Dirección de Vinculación
 y Desarrollo campus Guadalajara] se está enfocando más en la planeación
 de movimientos para robots, así como el Instituto Tecnológico Autónomo
 de México[Laboratorio de robótica, ITAM] se enfocan al área de robots móviles
 pequeños.
\end_layout

\begin_layout Chapter
Modelado de objetos
\begin_inset LatexCommand label
name "cha:3_Modelado3D"

\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
Una aplicación de modelado de objetos proporciona una biblioteca de funciones
 que pueden utilizarse para crear diseños de objetos que posteriormente
 se pueden plasmar en madera o algún otro tipo de material que pueda ser
 moldeado por alguna de las herramientas soportadas por el robot.
 Estas funciones se denominan primitivas gráficas o simplemente primitivas.
\end_layout

\begin_layout Standard
Para describir un modelo, primero es necesario seleccionar un sistema de
 coordenadas cartesianas adecuado, que puede ser bidimensional o tridimensional.
 Después se describen los objetos del modelo proporcionando sus especificaciones
 geométricas.
 Por ejemplo se define una línea recta proporcionando la posicion de los
 dos puntos extremos.
\end_layout

\begin_layout Section
Primitivas de graficación
\end_layout

\begin_layout Standard
Las primitivas gráficas que describen la geometría de los objetos se denominan
 normalmente primitrivas gemétricas.
 Entre las primitivas geométricas más simples son las que indican posiciones
 de puntos y segmentos de líneas rectas.
 Adicionalmente se pueden incluir circulos, elipses y curvas tipo bezier.
\end_layout

\begin_layout Subsection
Punto
\end_layout

\begin_layout Standard
El punto es el objeto más simple que puede representarse, solo se necesita
 un punto dentro del sistema de coordenadas.
\end_layout

\begin_layout Subsection
Linea
\end_layout

\begin_layout Subsection
Círculo
\end_layout

\begin_layout Subsection
Elipse
\end_layout

\begin_layout Subsection
Curva de Bezier
\end_layout

\begin_layout Subsection
Elementos compuestos
\end_layout

\begin_layout Section
Almacenamiento y recuperación
\end_layout

\begin_layout Standard
El almacenamiento y recuperación es una de las operaciones más importantes
 en un sistema, 
\end_layout

\begin_layout Subsection
Almacenamiento en formato XML
\end_layout

\begin_layout Standard
El formato XML
\end_layout

\begin_layout Standard
Algunas de las ventajas de este formato son:
\end_layout

\begin_layout Itemize
Independiente de la plataforma.
\end_layout

\begin_layout Itemize
Soporta código Unicode.
\end_layout

\begin_layout Itemize
El mismo documento define la estructura y los campos asi como los valores
 respectivos.
\end_layout

\begin_layout Itemize
Es basado en estándares internacionales.
\end_layout

\begin_layout Subsection
Estructura de almacenamiento
\end_layout

\begin_layout Standard
La estructura de almacenamiento puede observarse en la figura 
\begin_inset LatexCommand ref
reference "fig:EstructuraXML"

\end_inset

.
 Como puede observar la estructura es simple, compacta y fácil de entender.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename imagenes/estructura_xml.png
	width 50page%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:EstructuraXML"

\end_inset

Estructura de almacenamiento
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la figura 
\begin_inset LatexCommand ref
reference "fig:EstructuraXML"

\end_inset

 puede observarse:
\end_layout

\begin_layout Itemize
No existe límite en la cantidad de primitivas usadas en un diseño.
\end_layout

\begin_layout Itemize
Los puntos de control de una primitiva pueden no tener límite, es decir
 una primitiva puede tener N puntos de control.
 
\end_layout

\begin_layout Itemize
Cada primitiva es identificada mediante mediante un número entero (tipo):
\end_layout

\begin_deeper
\begin_layout Itemize
Punto (1)
\end_layout

\begin_layout Itemize
Línea (2)
\end_layout

\begin_layout Itemize
Poli-Línea (3)
\end_layout

\begin_layout Itemize
Círculo (4)
\end_layout

\begin_layout Itemize
Elipse (5)
\end_layout

\begin_layout Itemize
Curva de Bezier (6)
\end_layout

\end_deeper
\begin_layout Section
Importacion de otros formatos
\end_layout

\begin_layout Subsection
Imágenes PGM
\end_layout

\begin_layout Standard
Una imagen PGM es la representacion a escala de grises de una imagen.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename imagenes/logo_a_robot.png
	width 70page%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:pgm_a_robot"

\end_inset

PGM a Robot
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Archivos CAD (dxf)
\end_layout

\begin_layout Chapter
Interfaces de software
\begin_inset LatexCommand label
name "cha:4_Interfaces3D"

\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
La interfaz de usuario es uno de los apartados con más relevancia de un
 sistema de computo, en la actualidad todo sistema debe contener una herramienta
 con la que el usuario pueda ordenar al computador que hacer.
\end_layout

\begin_layout Standard
Una interfaz de usuario mal diseñada puede causar que el mejor sistema de
 cómputo sea ineficaz y por lo tanto sea deshechado, es por esto que se
 debe realizar un buen diseño de la interfaz de usuario, la cual incluye:
\end_layout

\begin_layout Itemize
Eleccion de lenguaje de programación.
\end_layout

\begin_layout Itemize
Diseño de la interfaz gráfica.
\end_layout

\begin_layout Itemize
Elección de sistema de renderización.
\end_layout

\begin_layout Section
Lenguaje de programación
\end_layout

\begin_layout Standard
En la actualidad existe una gran cantidad de lenguajes de programación,
 la mayoría de propósito general y el resto de propósito específico, a continuac
ión se listan los más populares de ambas categorías:
\end_layout

\begin_layout Itemize
C.
\end_layout

\begin_layout Itemize
Basic.
\end_layout

\begin_layout Itemize
Java.
\end_layout

\begin_layout Itemize
.Net.
\end_layout

\begin_layout Itemize
Perl.
\end_layout

\begin_layout Itemize
PHP.
\end_layout

\begin_layout Standard
Estos podrían ser los más utilizados hoy por hoy, pero debido a la heterogeneida
d de sistemas operativos y arquitecturas, no todos los lenguajes de programación
 son aplicables.
 
\end_layout

\begin_layout Standard
En el caso de los lenguajes compilados es poco probable su funcionalidad
 en diferentes plataformas debido a la dependencia de tipo de procesador
 que adquieren al momento de compilar, por ejemplo si se compila en un procesado
r tipo RISC es imposible ejecutarlo en un procesador tipo CISC.
\end_layout

\begin_layout Standard
Por otro lado los lenguajes interpretados son muy portables a todas las
 arquitecturas y sistemas operativos debido a que no dependen de un tipo
 de arquitectura pero requieren de que exista un progama nativo que los
 interprete, es decir, que si la empresa desarrolladora del lenguaje interpretad
o no libera una versión de su intérprete para un sistema operativo en una
 arquitectura determinada los programas escritos en este lenguaje no se
 ejecutarán.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status collapsed

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Windows
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Linux
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
MacOS
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Basic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Java
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
.Net
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Perl
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
PHP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "tablaLenguajesProgramacion"

\end_inset

Lenguajes Sistemas Operativos
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la tabla 
\begin_inset LatexCommand ref
reference "tablaLenguajesProgramacion"

\end_inset

 se puede apreciar los alcances de los lenguajes de programación más desarrollad
os y más difundidos en la actualidad, dejando claro que Java es el lenguaje
 de programación con mayor portabilidad debido a que se cuenta con intérpretes
 para todas las arquitecturas y además que no se requiere modificar el código
 fuente para ejecutarse en éstas.
\end_layout

\begin_layout Subsection
Java
\end_layout

\begin_layout Standard
Java es una plataforma de software desarrollada por Sun Microsystem, de
 forma que los programas creados en ella puedan ejecutarse sin cambios en
 diferentes tipos de arquitecturas y dispositivos computacionales.
 
\end_layout

\begin_layout Standard
Esta plataforma está compuesta por:
\end_layout

\begin_layout Itemize
El Lenguaje de programación.
\end_layout

\begin_layout Itemize
La máquina virtual de Java (JVM).
\end_layout

\begin_layout Itemize
Un conjunto de bibliotecas estándar, conocidas como API.
\end_layout

\begin_layout Standard
El lenguaje de programación usa la sintaxis de C++, incorpora sincronización,
 manejo de tareas e interfaces como un mecanismo alternativo a la herencia
 múltiple de C++.
\end_layout

\begin_layout Standard
La máquina virtual de Java (JVM) es un programa nativo (un ejecutable de
 una plataforma específica) capaz de interpretar y ejecutar código binario
 especial (llamado Java Bytecode), el cual es generado a partir del compilador
 de Java.
 Es por esto que Sun Microsystem ha liberado versiones de su JVM para las
 arquitecturas y sistemas operativos más utilizados, volviendo así a las
 aplicaciones desarrolladas en Java multiplataforma.
\end_layout

\begin_layout Section
Diseño de la interfaz gráfica
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename imagenes/igu_tesis.png
	width 70page%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:igu_diseño"

\end_inset

Diseño de la interfaz gráfica
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Elección de sistema de renderización.
\end_layout

\begin_layout Standard
La elección debe realizarse tomando en cuenta ventajas y desventajas de
 las tecnologías disponibles las cuales se muestran en la tabla 
\begin_inset LatexCommand ref
reference "tab:Comparativa-entre-Direct3DJava3dOpenGl"

\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Direct3D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Java3D
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
OpenGL
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Plataformas soportadas
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Windows
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Multiplataforma
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Multiplataforma
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Soporte nativo
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Si
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Si
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Licencia
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
EULA
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
GNU General Public
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
SGI
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Comparativa entre Direct3D, Java3D y OpenGL
\begin_inset LatexCommand label
name "tab:Comparativa-entre-Direct3DJava3dOpenGl"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Debido a que Direct3D solo soporta la plataforma MS-Windows fue deshechada
 y por otra parte Java3D tiene una dependencia con OpenGL o con Direct3D
 también fue deshecada dejando como sistema de renderización a OpenGL.
\end_layout

\begin_layout Subsection
OpenGL
\end_layout

\begin_layout Standard
OpenGL es una especificación estándar que define una API multilenguaje y
 multiplataforma para escribir aplicaciones que produzcan gráficos 2D y
 3D.
 Fue desarrollada por Silicon Graphics Inc.
 (SGI) en 1992 .
\end_layout

\begin_layout Standard
Las funciones y comandos de esta API están integrados en las tarjetas de
 aceleración gráfica 3D, o en su defecto son emuladas por el sistema operativo.
 Es claro que para el propósito específico de modelado 3D no se debe realizar
 emulación por software sino se debe tener acceso directo al hardware.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename imagenes/opengl-hw.png
	lyxscale 50
	width 70page%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:Aplicación-OpenGL"

\end_inset

Aplicación utilizando OpenG y aceleración gráfica por hardware
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la figura 
\begin_inset LatexCommand ref
reference "fig:Aplicación-OpenGL"

\end_inset

 se muestra una aplicación utilizando OpenGL y aceleración gráfica por hardware;
 se puede observar que las llamadas a la interfaz de aplicación OpenGL pasan
 directamente al hardware de aceleración y no pasan a tavés de la interfaz
 de dispositivo de gráfico (GDI) que sería el caso si se tratara de simulación
 por software.
\end_layout

\begin_layout Subsubsection
GLUT
\end_layout

\begin_layout Standard
Es un conjunto de herramientas OpenGL, un sistema de ventanas independientes
 para escribir programas OpenGL en lenguajes C y FORTRAN.
 Implementa un simple interfaz de programación para aplicaciones (API) para
 OpenGL.
 Por su parte GLUT hace considerablemente fácil la programación OpenGL.
\end_layout

\begin_layout Standard
GLUT provee un soporte para las plataformas Windows, Linux, Mac.
 Con la única desventaja de tener que recompilar para ser usado en otra
 plataforma.
\end_layout

\begin_layout Subsubsection
JOGL (JSR-231)
\end_layout

\begin_layout Standard
Jogl es un enlace del lenguaje de programación Java para la API de OpenGL.
 Soporta integración con los estándares de Java AWT y Swing.
 Jogl provee aceso a las más recientes rutinas de OpenGL (OpenGL 2.0 con
 extenciones de fabricante) asi como una pataforma independiente para accesar
 a hardware acelerador.
 
\end_layout

\begin_layout Standard
Jogl tambien prvee algunas de las mas populares características introducidas
 por otros enlaces existentes para OpenGL como son GL4Java, LWJGL, GLUT
 entre otros.
\end_layout

\begin_layout Standard
Es importante mencionar que esta tecnologia es código abierto y fue iniciada
 por Game Technology Group.
\end_layout

\begin_layout Chapter
Interfaz entre modelado y el robot SCARA
\begin_inset LatexCommand label
name "cha:5_InterfazModelado"

\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
La interfaz entre el software modelador y el robot es una parte muy importante,
 ya que si esta llega a colapsar o mal-funcionar se verá reflejado en un
 trabajo final(objeto de madera) no satisfactorio.
\end_layout

\begin_layout Section
Robot SCARA
\end_layout

\begin_layout Standard
El robot con el cual se trabajó se puede apreciar en la figura 
\begin_inset LatexCommand ref
reference "fig:RobotScara"

\end_inset

.
 Este robot cuenta con 4 grados de libertad construido en el departamento
 de robótica de la FIE, fijo en su base y hecho de acero y aluminio
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:RobotScara"

\end_inset

Robot SCARA
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Características
\end_layout

\begin_layout Standard
Entre las características más relevantes acerca del robot se tiene:
\end_layout

\begin_layout Itemize
4 Grados de libertad.
\end_layout

\begin_layout Itemize
Alcance máximo de su brazo 50 cm.
\end_layout

\begin_layout Itemize
Construido en acero y aluminio.
\end_layout

\begin_layout Itemize
Peso alrededor de 45 Kg.
\end_layout

\begin_layout Subsection
Diseño
\end_layout

\begin_layout Subsection
Limitantes
\end_layout

\begin_layout Section
Conversión de modelado a acciones SCARA
\end_layout

\begin_layout Subsection
Cinemática inversa
\end_layout

\begin_layout Section
Conectividad PC-Robot
\end_layout

\begin_layout Chapter
Pruebas
\begin_inset LatexCommand label
name "cha:6_Pruebas"

\end_inset


\end_layout

\begin_layout Section
Introducción 
\end_layout

\begin_layout Section
Funcionalidad multiplataforma del software 3D
\end_layout

\begin_layout Subsection
Windows
\end_layout

\begin_layout Subsection
Linux
\end_layout

\begin_layout Section
Conectividad multiplataforma entre software y el robot
\end_layout

\begin_layout Subsection
Windows
\end_layout

\begin_layout Subsection
Linux
\end_layout

\begin_layout Section
Pruebas en campo
\end_layout

\begin_layout Subsection
Realizacion de primitivas
\end_layout

\begin_layout Subsection
Imagenes PGM
\end_layout

\begin_layout Subsection
Archivos CAD
\end_layout

\begin_layout Chapter
Conclusiones
\begin_inset LatexCommand label
name "cha:7_Conclusiones"

\end_inset


\end_layout

\begin_layout Section
Conclusiones
\end_layout

\begin_layout Section
Trabajos futuros 
\end_layout

\begin_layout Chapter*
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
newpage
\end_layout

\begin_layout Standard


\backslash
addcontentsline{toc}{chapter}{Anexo}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Anexo Glosario
\end_layout

\begin_layout Description
CISC Complex-Intruction-Set Computing.
\end_layout

\begin_layout Description
CRM Customer Relationship Management.
\end_layout

\begin_layout Description
ERP Enterprise Resource Planning.
\end_layout

\begin_layout Description
ISO International Organization for Standardization.
\end_layout

\begin_layout Description
JIRA Japan Industrial Robot Association.
\end_layout

\begin_layout Description
OpenGL Open Graphics Library.
\end_layout

\begin_layout Description
PGM Portable GrayMap.
\end_layout

\begin_layout Description
RISC Reduced-Intruction-Set Computing.
\end_layout

\begin_layout Description
SCARA Selective Compliant Articulated Robot Arm.
\end_layout

\begin_layout Description
XML Extensible Markup Language.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "WIKI-ROBOT"
key "key-3"

\end_inset

http://en.wikipedia.org/wiki/Industrial_robot
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "GLUT"
key "key-4"

\end_inset

http://www.opengl.org/resources/libraries/glut/
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "JOGL"
key "key-5"

\end_inset

https://jogl.dev.java.net/
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "RAH"
key "key-1"

\end_inset

Thomas R.
 Kurfess, Robotics and Automation Handbook, E.U.A.: ed.
 CRC PRESS, 2005.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "CER"
key "key-2"

\end_inset

Stan Gibilisco, Concise Encyclopedia of Robotics, E.U.A.: ed.
 McGraw-Hill, 2003
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "PJGD"
key "key-3"

\end_inset

Andrew Davison, Pro Java 6 3D Game Development Java 3D, JOGL, JInput and
 JOAL APIs, E.U.A.: ed.
 Apress, 2007
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
label "RMRM"
key "key-1"

\end_inset

Aníbal Ollero Baturone, Robótica: Manipuladores y robots móviles, Marcombo
 Editorial.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "key-1"

\end_inset

Wilbert O.
 Galitz, The Essential Guide to User Interface Design, E.U.A.: ed.: Wiley, 2007.
\end_layout

\end_body
\end_document
